from unittest import TestCase

from lib.pixel_locator import PixelLocator, average_out


class TestPixelLocator(TestCase):
    """Test the PixelLocator."""

    def test_gather_json(self):
        """Test it collects the data."""
        ploc = PixelLocator([720, 480], data_root="tests/fixtures/analysis")
        self.assertEqual(
            ploc.parsed_json,
            {
                "back": {
                    "00": {"x": 373, "y": 391},
                    "01": {"x": 176, "y": 220},
                    "05": {"x": 627, "y": 143},
                    "06": {"x": 549, "y": 176},
                    "07": {"x": 224, "y": 131},
                    "13": {"x": 545, "y": 76},
                    "14": {"x": 273, "y": 49},
                    "19": {"x": 306, "y": 31},
                },
                "front": {
                    "03": {"x": 445, "y": 38},
                    "04": {"x": 193, "y": 97},
                    "09": {"x": 615, "y": 281},
                    "10": {"x": 332, "y": 296},
                    "11": {"x": 111, "y": 293},
                    "16": {"x": 570, "y": 223},
                    "17": {"x": 252, "y": 117},
                },
                "left": {
                    "01": {"x": 661, "y": 177},
                    "02": {"x": 396, "y": 54},
                    "03": {"x": 191, "y": 86},
                    "07": {"x": 643, "y": 116},
                    "08": {"x": 454, "y": 204},
                    "09": {"x": 155, "y": 284},
                    "14": {"x": 540, "y": 33},
                    "15": {"x": 359, "y": 140},
                    "16": {"x": 127, "y": 236},
                    "19": {"x": 479, "y": 11},
                },
                "right": {
                    "00": {"x": 93, "y": 340},
                    "04": {"x": 555, "y": 72},
                    "05": {"x": 287, "y": 157},
                    "06": {"x": 112, "y": 246},
                    "11": {"x": 626, "y": 271},
                    "12": {"x": 295, "y": 297},
                    "13": {"x": 162, "y": 149},
                    "17": {"x": 658, "y": 136},
                    "18": {"x": 448, "y": 19},
                },
            },
        )

    def test_consolidate(self):
        """Test it consolidates the data."""
        ploc = PixelLocator([720, 480], data_root="tests/fixtures/analysis", lights=20)
        self.assertEqual(
            ploc.consolidated_data,
            {
                "00": {"x": [347], "y": [391, 340], "z": [93]},
                "01": {"x": [544], "y": [220, 177], "z": [59]},
                "02": {"x": [], "y": [54], "z": [324]},
                "03": {"x": [445], "y": [38, 86], "z": [529]},
                "04": {"x": [193], "y": [97, 72], "z": [555]},
                "05": {"x": [93], "y": [143, 157], "z": [287]},
                "06": {"x": [171], "y": [176, 246], "z": [112]},
                "07": {"x": [496], "y": [131, 116], "z": [77]},
                "08": {"x": [], "y": [204], "z": [266]},
                "09": {"x": [615], "y": [281, 284], "z": [565]},
                "10": {"x": [332], "y": [296], "z": []},
                "11": {"x": [111], "y": [293, 271], "z": [626]},
                "12": {"x": [], "y": [297], "z": [295]},
                "13": {"x": [175], "y": [76, 149], "z": [162]},
                "14": {"x": [447], "y": [49, 33], "z": [180]},
                "15": {"x": [], "y": [140], "z": [361]},
                "16": {"x": [570], "y": [223, 236], "z": [593]},
                "17": {"x": [252], "y": [117, 136], "z": [658]},
                "18": {"x": [], "y": [19], "z": [448]},
                "19": {"x": [414], "y": [31, 11], "z": [241]},
            },
        )

    def test_normalise(self):
        """Test it averages-out the data."""
        ploc = PixelLocator([720, 480], data_root="tests/fixtures/analysis", lights=20)

        self.assertEqual(
            ploc.normalised_data,
            {
                "00": {"x": 347.0, "y": 365.5, "z": 93.0},
                "01": {"x": 544.0, "y": 198.5, "z": 59.0},
                "02": {"y": 54.0, "z": 324.0},
                "03": {"x": 445.0, "y": 62.0, "z": 529.0},
                "04": {"x": 193.0, "y": 84.5, "z": 555.0},
                "05": {"x": 93.0, "y": 150.0, "z": 287.0},
                "06": {"x": 171.0, "y": 211.0, "z": 112.0},
                "07": {"x": 496.0, "y": 123.5, "z": 77.0},
                "08": {"y": 204.0, "z": 266.0},
                "09": {"x": 615.0, "y": 282.5, "z": 565.0},
                "10": {"x": 332.0, "y": 296.0},
                "11": {"x": 111.0, "y": 282.0, "z": 626.0},
                "12": {"y": 297.0, "z": 295.0},
                "13": {"x": 175.0, "y": 112.5, "z": 162.0},
                "14": {"x": 447.0, "y": 41.0, "z": 180.0},
                "15": {"y": 140.0, "z": 361.0},
                "16": {"x": 570.0, "y": 229.5, "z": 593.0},
                "17": {"x": 252.0, "y": 126.5, "z": 658.0},
                "18": {"y": 19.0, "z": 448.0},
                "19": {"x": 414.0, "y": 21.0, "z": 241.0},
            },
        )
        self.assertEqual(
            ploc.limits,
            {
                "x": {"max": 615.0, "min": 93.0},
                "y": {"max": 365.5, "min": 19.0},
                "z": {"max": 658.0, "min": 59.0},
            },
        )


def test_average_out():
    """Test it averages a list."""
    assert average_out([1]) == 1
    assert average_out([1, 3]) == 2
    assert average_out([1, 4]) == 2.5
