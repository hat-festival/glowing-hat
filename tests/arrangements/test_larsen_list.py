from lib.arrangements.larsen_list import LarsenList, slice_from_end, slice_from_start


def test_constructor():
    """Test it gets the right data."""
    ll = LarsenList(10)
    assert ll.hat_length == 10  # noqa: PLR2004


def test_template():
    """Test it has the right template."""
    ll = LarsenList(10)
    assert ll.template == {
        "head": [1.0],
        "tail": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
    }


def test_shorter_tail():
    """Test it can make a shorter tail."""
    ll = LarsenList(10, tail_proportion=0.5)
    assert ll.template == {"head": [1.0], "tail": [0.2, 0.4, 0.6, 0.8]}
    assert ll.populate() == [
        [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.6, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.4, 0.6, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.2, 0.4, 0.6, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.4, 0.6, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.4, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
    ]


def test_populating():
    """Test it gets the correct frasmes."""
    ll = LarsenList(10)
    assert ll.populate()[0:3] == [
        [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.8, 0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    ]


def test_bunching():
    """Test it bunches at the end."""
    ll = LarsenList(10)
    assert ll.populate() == [
        [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.8, 0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.7, 0.8, 0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.6, 0.7, 0.8, 0.9, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.0, 0.0, 0.0, 0.0],
        [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.0, 0.0, 0.0],
        [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.0, 0.0],
        [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.0],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0],
        [0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 1.0],
        [0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
    ]


def test_reversing():
    """Test it reverses correctly."""
    ll = LarsenList(10)
    assert ll.populate(inverted=True) == [
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9, 0.8],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9, 0.8, 0.7],
        [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9, 0.8, 0.7, 0.6],
        [0.0, 0.0, 0.0, 0.0, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],
        [0.0, 0.0, 0.0, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
        [0.0, 0.0, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
        [0.0, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
        [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [1.0, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0],
        [1.0, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0],
        [1.0, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0],
        [1.0, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    ]


def test_with_thicker_head():
    """Test it can carry a broader head."""
    ll = LarsenList(10, head_width=0.2)
    assert ll.template == {
        "head": [1.0, 1.0],
        "tail": [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
    }

    assert ll.populate() == [
        [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.9, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.8, 0.9, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.7, 0.8, 0.9, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.6, 0.7, 0.8, 0.9, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0, 0.0, 0.0, 0.0],
        [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0, 0.0, 0.0],
        [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0, 0.0],
        [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.0],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0, 1.0],
        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 1.0, 1.0],
        [0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.4, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0],
    ]


def test_with_bigger_hat():
    """Test it does something sensible for a bigger hat."""
    ll = LarsenList(20)
    assert ll.template == {
        "head": [1.0, 1.0],
        "tail": [
            0.05,
            0.1,
            0.15,
            0.2,
            0.25,
            0.3,
            0.35,
            0.4,
            0.45,
            0.5,
            0.55,
            0.6,
            0.65,
            0.7,
            0.75,
            0.8,
            0.85,
            0.9,
            0.95,
        ],
    }


def test_with_real_hat():
    """Test it does something sensible for a realistic hat."""
    ll = LarsenList(100)
    assert len(ll.populate()) == 190  # noqa: PLR2004


def test_slice_from_start():
    """Test we can sensibly slice an iterable from the start."""
    test_array = [0, 1, 2, 3, 4, 5, 6, 7]

    assert slice_from_start(test_array, 0, 1) == [0]
    assert slice_from_start(test_array, 3, 3) == [3, 4, 5]


def test_slice_from_end():
    """Test we can sensibly slice an iterable from the end."""
    test_array = [0, 1, 2, 3, 4, 5, 6, 7]
    assert slice_from_end(test_array, 0, 1) == [7]
