from lib.space_solver import SpaceSolver


def test_easy_case():
    """Test the easy case."""
    point = (-1.0, -1.0, -1.0)
    solver = SpaceSolver(point, steps=1)

    assert solver.increments == (1.0, 1.0, 1.0)

    assert solver.states == [
        (-1.0, -1.0, -1.0),
        (0.0, 0.0, 0.0),
        (1.0, 1.0, 1.0),
    ]


def test_with_positives():
    """Test starting somewhere positive."""
    point = (1.0, -1.0, -1.0)
    solver = SpaceSolver(point, steps=1)

    assert solver.increments == (-1.0, 1.0, 1.0)

    assert solver.states == [
        (1.0, -1.0, -1.0),
        (0.0, 0.0, 0.0),
        (-1.0, 1.0, 1.0),
    ]


def test_more_steps():
    """Test with more steps."""
    point = (-1.0, 1.0, -1.0)
    solver = SpaceSolver(point, steps=4)

    assert solver.states == [
        (-1.0, 1.0, -1.0),
        (-0.75, 0.75, -0.75),
        (-0.5, 0.5, -0.5),
        (-0.25, 0.25, -0.25),
        (0.0, 0.0, 0.0),
        (0.25, -0.25, 0.25),
        (0.5, -0.5, 0.5),
        (0.75, -0.75, 0.75),
        (1.0, -1.0, 1.0),
    ]


def test_with_offsets():
    """Test starting somewhere other than the corner."""
    point = (0.5, -1.0, -0.7)
    solver = SpaceSolver(point, steps=3)

    assert solver.states == [
        (0.5, -1.0, -0.7),
        (0.33333333333333337, -0.6666666666666667, -0.4666666666666667),
        (0.16666666666666669, -0.33333333333333337, -0.23333333333333334),
        (0.0, 0.0, 0.0),
        (-0.16666666666666663, 0.33333333333333326, 0.23333333333333328),
        (-0.33333333333333326, 0.6666666666666665, 0.46666666666666656),
        (-0.5, 1.0, 0.7),
    ]


def test_vaguely_realistic_case():
    """Test something like a real case."""
    point = (-1.0, 0.7, -0.07)
    solver = SpaceSolver(point, steps=10)

    assert solver.states == [
        (-1.0, 0.7, -0.07),
        (-0.9, 0.63, -0.063),
        (-0.8, 0.5599999999999999, -0.05600000000000001),
        (-0.7, 0.49, -0.049),
        (-0.6, 0.42, -0.042),
        (-0.5, 0.35, -0.035),
        (-0.3999999999999999, 0.28, -0.027999999999999997),
        (-0.29999999999999993, 0.21000000000000002, -0.020999999999999998),
        (-0.19999999999999996, 0.14, -0.013999999999999999),
        (-0.09999999999999998, 0.07000000000000006, -0.006999999999999992),
        (0.0, 0.0, 0.0),
        (0.10000000000000009, -0.06999999999999995, 0.007000000000000006),
        (0.20000000000000018, -0.1399999999999999, 0.014000000000000012),
        (0.30000000000000004, -0.20999999999999996, 0.021000000000000005),
        (0.40000000000000013, -0.2799999999999999, 0.02800000000000001),
        (0.5, -0.34999999999999987, 0.035),
        (0.6000000000000001, -0.41999999999999993, 0.04200000000000001),
        (0.7000000000000002, -0.49, 0.049000000000000016),
        (0.8, -0.5599999999999998, 0.05600000000000002),
        (0.9000000000000001, -0.6299999999999999, 0.063),
        (1.0, -0.7, 0.07),
    ]
